#include<bits/stdc++.h>

// memoization

// int memo(vector<vector<int>>& cost,int idx,int prev,vector<vector<int>>& dp){
// 	if(idx == cost.size()){
// 		return 0;
// 	}
// 	if(prev >= 0 && dp[idx][prev] != -1){
// 		return dp[idx][prev];
// 	}

// 	int ansR = (prev == 0) ? INT_MAX : memo(cost,idx+1,0,dp) + cost[idx][0];
// 	int ansB = (prev == 1) ? INT_MAX : memo(cost,idx+1,1,dp) + cost[idx][1];
// 	int ansG = (prev == 2) ? INT_MAX : memo(cost,idx+1,2,dp) + cost[idx][2];

// 	if(prev == -1){
// 		return min(ansR,min(ansG,ansB));
// 	}
// 	return dp[idx][prev] = min(ansR,min(ansG,ansB));
// }
// int minCost(vector<vector<int>> &cost)
// {	
// 	int n = cost.size();
// 	vector<vector<int>>dp(n+1,vector<int>(3,-1));
// 	return memo(cost,0,-1,dp);
// }

// tabulation
// int minCost(vector<vector<int>> &cost)
// {   
//     int n = cost.size();
// 	vector<vector<int>>dp(n+1,vector<int>(3));

//     dp[0][0] = cost[0][0];
//     dp[0][1] = cost[0][1];
//     dp[0][2] = cost[0][2];

//     for(int i=1; i<n; i++){
//         dp[i][0] = cost[i][0] + min(dp[i-1][1],dp[i-1][2]);
//         dp[i][1] = cost[i][1] + min(dp[i-1][0],dp[i-1][2]);
//         dp[i][2] = cost[i][2] + min(dp[i-1][0],dp[i-1][1]);
//     }
//     return min(dp[n-1][0],min(dp[n-1][1],dp[n-1][2]));
// }

// space optimization it is only possible when previyous states are limited

int minCost(vector<vector<int>> &cost)
{
	int prev0 = cost[0][0];
    int prev1 = cost[0][1];
    int prev2 = cost[0][2];

    for(int i=1; i<cost.size(); i++){
        int curr0 = cost[i][0] + min(prev1,prev2);
        int curr1 = cost[i][1] + min(prev0,prev2);
        int curr2 = cost[i][2] + min(prev0,prev1);

        prev0 = curr0;
        prev1 = curr1;
        prev2 = curr2;
    }
    return min(prev0,min(prev1,prev2));


}
