#include<bits/stdc++.h>
int memo(vector<vector<int>>& cost,int idx,int prev,vector<vector<int>>& dp){
	if(idx == cost.size()){
		return 0;
	}
	if(prev >= 0 && dp[idx][prev] != -1){
		return dp[idx][prev];
	}

	int ansR = (prev == 0) ? INT_MAX : memo(cost,idx+1,0,dp) + cost[idx][0];
	int ansB = (prev == 1) ? INT_MAX : memo(cost,idx+1,1,dp) + cost[idx][1];
	int ansG = (prev == 2) ? INT_MAX : memo(cost,idx+1,2,dp) + cost[idx][2];

	if(prev == -1){
		return min(ansR,min(ansG,ansB));
	}
	return dp[idx][prev] = min(ansR,min(ansG,ansB));
}
int minCost(vector<vector<int>> &cost)
{	
	int n = cost.size();
	vector<vector<int>>dp(n+1,vector<int>(3,-1));
	return memo(cost,0,-1,dp);
}
