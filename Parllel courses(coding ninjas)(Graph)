class Graph{
    public:

    int n;
    vector<int>* adj;

    Graph(int n){
        this -> n = n;
        adj = new vector<int>[n];
    }

    void addEdge(int src,int dest){
        adj[src].push_back(dest);
    }
};
struct Pair{
    int courseId;
    int semesterId;

    Pair(int courseId, int semesterId){
        this -> courseId = courseId;
        this -> semesterId = semesterId;
    }
};
int parallelCourses(int n, vector<vector<int>> &prerequisites)
{
    Graph g(n);
    for(const vector<int>edge : prerequisites){
        g.addEdge(edge[1] - 1,edge[0] - 1);
    }

    vector<int>incoming(n);
    for(const vector<int>node : prerequisites){
        incoming[node[0] - 1]++;
    }

    queue<Pair>q;
    for(int i=0; i<n; i++){
        if(incoming[i] == 0){// jinka bhi incoming 0 hoga wo apne index ke sath curr sem ke sath queue me push ho jayenge
            q.push(Pair(i,1));
        }
    }

    int ans = 0;
    while(q.size() > 0){
        Pair p = q.front();
        q.pop();
        ans = max(ans,p.semesterId);

        for(int nbr : g.adj[p.courseId]){
            incoming[nbr]--;
            if(incoming[nbr] == 0){
                q.push(Pair(nbr,p.semesterId + 1));
            }
        }
    }

    for(int i=0; i<n; i++){
        if(incoming[i] > 0){
            return -1;
        }
    }
    return ans;
}
