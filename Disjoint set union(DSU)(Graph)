#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class DSU {
    vector<int> parent;
    vector<int> rank;

public:
    DSU(int n) {
        parent.resize(n, -1);
        rank.resize(n,1);
    }

    void union_set(int a, int b) {
        int pa = find(a);
        int pb = find(b);
        if (pa == pb) {
            return;
        }
        if (rank[pa] > rank[pb]) {
            parent[pb] = pa;
            rank[pa] += rank[pb];
        } else {
            parent[pa] = pb;
            rank[pb] += rank[pa];
        }
    }

    int find(int a) {
        if (parent[a] == -1) {
            return a;
        }
        return parent[a] = find(parent[a]);
    }
};

int main() {
    int n, e;
    cin >> n >> e;
    DSU sets(n + 1);

    while (e-- > 0) {
        int a, b;
        cin >> a >> b;
        sets.union_set(a, b);
    }

    int components = 0;
    for (int i = 1; i <= n; i++) {
        if (sets.find(i) == i) {
            components++;
        }
    }
    cout << components << endl;

    return 0;
}
